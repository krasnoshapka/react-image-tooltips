{"version":3,"sources":["../../src/Accordion.tsx","../../src/hooks/firstmount.tsx","../../src/ImageTooltipsItem.tsx","../../src/ImageTooltips.tsx","App.js","index.js"],"names":["children","toggled","onFullyShown","onFullyHidden","isFirstMount","isFirst","useRef","current","useFirstMount","handleAnimationRest","React.useCallback","React.createElement","Spring","config","tension","friction","clamp","from","height","to","immediate","onRest","styleProps","className","style","props","id","top","left","imageSize","toggle","parentHandleClick","setToggled","cssClass","push","validateCoord","c","max","console","log","initW","initH","Math","round","curW","curH","join","tabIndex","onClick","Accordion","ImageTooltipsItem","_ImageTooltipsItem","timerId","src","width","_setImageSize","imageSizeRef","React.useRef","imageEl","setImageSize","imageData","React.useEffect","handleResize","setTimeout","offsetWidth","offsetHeight","undefined","window","addEventListener","removeEventListener","maxWidth","ref","onLoad","React.Children","toArray","map","child","index","key","App","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f17a6ac5.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Spring } from 'react-spring/renderprops.cjs';\nimport useFirstMount from './hooks/firstmount';\n\nexport interface AccordionProps extends React.HTMLAttributes<HTMLDivElement> {\n  toggled?: boolean;\n  children: React.ReactNode;\n  onFullyShown?: () => void;\n  onFullyHidden?: () => void;\n}\n\nexport function Accordion({\n  children,\n  toggled = false,\n  onFullyShown,\n  onFullyHidden,\n  ...props\n}: AccordionProps) {\n  const isFirstMount = useFirstMount();\n\n  const handleAnimationRest = React.useCallback(() => {\n    if (toggled && onFullyShown) onFullyShown();\n    else if (!toggled && onFullyHidden) onFullyHidden();\n  }, [toggled, onFullyShown, onFullyHidden]);\n\n  return (\n    <Spring\n      config={{\n        tension: 170,\n        friction: 22,\n        clamp: true\n      }}\n      from={{ height: 0 }}\n      to={{ height: toggled ? 'auto' : 0 }}\n      immediate={isFirstMount}\n      onRest={handleAnimationRest}\n    >\n      {styleProps => (\n        <div className=\"hotspot-content\" style={styleProps} {...props}>\n          {children}\n        </div>\n      )}\n    </Spring>\n  );\n}\n","import { useRef } from 'react';\n\n// Keeps track of whether this is the first time render since the component was mounted.\n// shamelessly taken from https://github.com/streamich/react-use\nexport default function useFirstMount() {\n  const isFirst = useRef(true);\n\n  if (isFirst.current) {\n    isFirst.current = false;\n\n    return true;\n  }\n\n  return isFirst.current;\n}\n","import * as React from 'react';\r\nimport {Accordion} from './Accordion';\r\nimport {imageSizeObject} from './ImageTooltips';\r\n\r\nexport interface ImageTooltipsItemProps {\r\n  id: number;\r\n  top: number;\r\n  left: number;\r\n  imageSize: imageSizeObject;\r\n  toggle: boolean;\r\n  children: React.ReactNode;\r\n  parentHandleClick: (id: number, toggle: boolean) => void\r\n}\r\n\r\nexport function ImageTooltipsItem({\r\n  children,\r\n  id,\r\n  top,\r\n  left,\r\n  imageSize,\r\n  toggle,\r\n  parentHandleClick,\r\n  // ...props\r\n}: ImageTooltipsItemProps) {\r\n  const [toggled, setToggled] = React.useState(toggle);\r\n  if (toggled !== toggle) {\r\n    setToggled(toggle);\r\n  }\r\n\r\n  const handleClick = () => {\r\n    setToggled(!toggled);\r\n    parentHandleClick(id, !toggled);\r\n  };\r\n\r\n  const cssClass = ['hotspot'];\r\n  if (toggled) cssClass.push('toggled');\r\n\r\n  // Validation of hotspot coordinates\r\n  const validateCoord = (c: number, max: number) => {\r\n    if (c <= 0) {\r\n      console.log(`Tooltip with id ${id} has coordinate outside of image.`);\r\n      return 1;\r\n    }\r\n    if (c > max) {\r\n      console.log(`Tooltip with id ${id} has coordinate outside of image.`);\r\n      return max;\r\n    }\r\n    return c;\r\n  }\r\n  left = validateCoord(left, imageSize.initW);\r\n  top = validateCoord(top, imageSize.initH);\r\n\r\n  // Calculate tooltip position based on image scaling\r\n  const style = {\r\n    left: `${Math.round(left * imageSize.curW / imageSize.initW)}px`,\r\n    top: `${Math.round(top * imageSize.curH / imageSize.initH)}px`\r\n  };\r\n\r\n  return (\r\n    <div className={cssClass.join(' ')} style={style} data-id={id}>\r\n      <div className=\"hotspot-trigger\" tabIndex={0} onClick={handleClick}>\r\n        +\r\n      </div>\r\n      <Accordion toggled={toggled}>\r\n        {children}\r\n      </Accordion>\r\n    </div>\r\n  );\r\n}\r\n","import * as React from 'react';\nimport {ImageTooltipsItem as _ImageTooltipsItem} from './ImageTooltipsItem';\nimport './styles.scss';\n\nexport const ImageTooltipsItem = _ImageTooltipsItem;\n\nexport interface ImageTooltipsProps {\n  src: string;\n  width: number;\n  height: number;\n  children: React.ReactNode\n}\n\nexport interface imageSizeObject {\n  initW: number;\n  initH: number;\n  curW: number;\n  curH: number\n}\n\nexport function ImageTooltips({ children, src, width, height, ...props }: ImageTooltipsProps) {\n  const [imageSize, _setImageSize] = React.useState<imageSizeObject | null>(null);\n  const imageSizeRef = React.useRef(imageSize);\n  const [toggled, setToggled] = React.useState<number | null>(null);\n  const imageEl = React.useRef<HTMLImageElement | null>(null);\n\n  // Need to use Ref because state is unavailable in handleResize EventListener\n  const setImageSize = (imageData: imageSizeObject) => {\n    imageSizeRef.current = imageData;\n    _setImageSize(imageData);\n  };\n\n  let timerId: NodeJS.Timeout | undefined;\n  React.useEffect(() => {\n    // Listener that handles resize with simple throttling\n    const handleResize = () => {\n      if (timerId) {\n        return;\n      }\n      timerId = setTimeout(() => {\n        setImageSize({\n          initW: imageSizeRef.current!.initW,\n          initH: imageSizeRef.current!.initH,\n          curW: imageEl.current!.offsetWidth,\n          curH: imageEl.current!.offsetHeight\n        });\n        timerId = undefined;\n      }, 200);\n    };\n\n    // Add event listener\n    window.addEventListener('resize', handleResize);\n\n    // Remove event listener on cleanup\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  const parentHandleClick = (id: number, toggle: boolean): void => {\n    setToggled(toggle ? id : null);\n  };\n\n  // Making image responsive\n  const style = {\n    maxWidth: `${width}px`\n  };\n\n  return (\n    <div className=\"hotspot-container\" style={style}>\n      <img ref={imageEl} src={src} {...props} onLoad={() => setImageSize({\n        // Set initial image dimensions in state\n        initW: width,\n        initH: height,\n        curW: imageEl.current!.offsetWidth,\n        curH: imageEl.current!.offsetHeight\n      })} />\n\n      {imageSize && children && React.Children.toArray(children).map((child: React.ReactElement, index) => {\n        return (\n          <_ImageTooltipsItem\n            key={index}\n            id={index}\n            toggle={index === toggled}\n            imageSize={imageSize}\n            parentHandleClick={parentHandleClick}\n            {...child.props}\n          >\n            {child.props.children}\n          </_ImageTooltipsItem>\n        );\n      })}\n    </div>\n  );\n}\n","import React from 'react';\nimport {ImageTooltips, ImageTooltipsItem} from \"react-image-tooltips\";\nimport \"react-image-tooltips/dist/index.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <h2>React Image Tooltips Demo</h2>\n\n        <ImageTooltips src=\"example.jpg\" width={816} height={544}>\n            <ImageTooltipsItem top={226} left={301}>\n                <p>Here's some content that lies inside an tooltip.</p>\n                <p>This content can only be viewed, once the tooltip is toggled.</p>\n            </ImageTooltipsItem>\n            <ImageTooltipsItem top={300} left={504}>\n                <p>Here's some content that lies inside an tooltip.</p>\n                <p>This content can only be viewed, once the tooltip is toggled.</p>\n            </ImageTooltipsItem>\n        </ImageTooltips>\n\n        © <a href=\"https://github.com/krasnoshapka\">krasnoshapka</a>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}